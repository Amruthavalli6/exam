import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, ConfusionMatrixDisplay


df = pd.read_csv("hi.csv") 
target_col = 'NObeyesdad'  
df = df.dropna(subset=[target_col])


X = df.drop(columns=[target_col])
y = df[target_col]


if y.dtype == 'object' or y.dtype.name == 'category':
    y = LabelEncoder().fit_transform(y)


X = pd.get_dummies(X, drop_first=True)


imputer = SimpleImputer(strategy='mean')
X = imputer.fit_transform(X)

selector = SelectKBest(score_func=f_classif, k='all') 
X = selector.fit_transform(X, y)


scaler = StandardScaler()
X = scaler.fit_transform(X)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


svm_clf = SVC(kernel='rbf', probability=True, random_state=42)
svm_clf.fit(X_train, y_train)


y_pred = svm_clf.predict(X_test)


accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')

print(f"SVM Classifier:\nAccuracy: {accuracy:.2f}, Precision: {precision:.2f}, Recall: {recall:.2f}")


cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix - SVM Classifier")
plt.show()
