import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

# STEP 1: Load dataset
df = pd.read_csv("hi.csv")  # Replace with your actual file path
target_col = 'NObeyesdad'  # Your target column (for reference only)

# STEP 2: Prepare features (drop target, K-Means is unsupervised)
X = df.drop(columns=[target_col])

# One-hot encode categorical features if any
X = pd.get_dummies(X, drop_first=True)

# STEP 3: Standardize features (important for distance-based algorithms like K-Means)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# STEP 4: K-Means Clustering
n_clusters = 3  # Adjust based on your data or analysis like elbow method
kmeans = KMeans(n_clusters=n_clusters, random_state=42)
kmeans.fit(X_scaled)

# STEP 5: Get cluster assignments
clusters = kmeans.predict(X_scaled)

# STEP 6: Evaluate clustering using silhouette score
sil_score = silhouette_score(X_scaled, clusters)
print(f"Silhouette Score: {sil_score:.2f}")

# STEP 7: Visualize clusters in 2D using PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
centers_pca = pca.transform(kmeans.cluster_centers_)

plt.figure(figsize=(10, 7))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=clusters, cmap='viridis', alpha=0.6)
plt.scatter(centers_pca[:, 0], centers_pca[:, 1], c='red', marker='X', s=200, label='Cluster Centers')
plt.title("K-Means Clustering Visualization with PCA")
plt.xlabel("PCA Component 1")
plt.ylabel("PCA Component 2")
plt.legend()
plt.show()
